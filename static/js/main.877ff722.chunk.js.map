{"version":3,"sources":["hoc/Aux.js","components/UI/VotingOpen/VotingOpen.js","components/UI/VotingClosed/VotingClosed.js","components/People/PastPerson/PastPerson.js","components/People/People/People.js","components/Navigation/Header/Header.js","components/Navigation/Footer/Footer.js","components/People/TopPerson/TopPerson.js","components/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["aux","props","children","VotingOpen","thumbsUpClasses","currentVote","thumbsDownClasses","Aux","className","description","onClick","goodVoteHandler","badVoteHandler","submitVoteHandler","disabled","category","VotingClosed","unblockVoting","PastPerson","pictureStyles","backgroundImage","picture","votesFor","votes","bad","Math","round","good","votingControl","votingClosed","addVoteHandler","id","style","name","properties","People","state","people","personId","voteType","console","log","newPeopleState","map","person","setState","persistLocalStorage","unblockVotingHandler","persistable","window","localStorage","setItem","JSON","stringify","localPeopleState","getItem","this","parse","fetch","then","response","status","json","data","key","Component","header","href","Footer","TopPerson","width","Layout","Header","strokeWidth","fill","d","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.877ff722.chunk.js","sourcesContent":["const aux = (props) => props.children;\n\nexport default aux;","import React from 'react';\nimport Aux from '../../../hoc/Aux';\n\nconst VotingOpen = (props) => {\n    const thumbsUpClasses = (props.currentVote === \"good\" ? \"thumbs-up selected\" : \"thumbs-up\");\n    const thumbsDownClasses = (props.currentVote === \"bad\" ? \"thumbs-down selected\" : \"thumbs-down\");\n    return (\n        \n        <Aux>\n            <p className=\"description\">{props.description}</p>\n            <div className=\"more\">\n                <p className=\"vote-buttons\">\n                    <button onClick={props.goodVoteHandler} className={thumbsUpClasses}></button>\n                    <button onClick={props.badVoteHandler} className={thumbsDownClasses}></button>\n                    <button onClick={props.currentVote ? props.submitVoteHandler : null} disabled={props.currentVote ? false : true}>Vote now</button>\n                </p>\n                <span className=\"tags\">\n                    <strong>1 month ago</strong>\n                    in {props.category}\n                </span>\n            </div>\n        </Aux>\n                            \n    );\n};\n\nexport default VotingOpen;","import React from 'react';\nimport Aux from '../../../hoc/Aux';\n\nconst VotingClosed = (props) => {\n\n    return (\n        \n        <Aux>\n            <p className=\"description\">Thank you for voting!</p>\n                <div className=\"more\">\n                    <p>\n                        <button onClick={props.unblockVoting}>Vote again</button>\n                    </p>\n                    <span className=\"tags\">\n                        <strong>1 month ago</strong>\n                        in {props.category}\n                    </span>\n                </div>\n                \n        </Aux>\n                            \n    );\n};\n\nexport default VotingClosed;","import React from 'react';\nimport Aux from '../../../hoc/Aux';\nimport VotingOpen from '../../UI/VotingOpen/VotingOpen';\nimport VotingClosed from '../../UI/VotingClosed/VotingClosed';\nimport CustomProperties from 'react-custom-properties';\n\nconst PastPerson = (props) => {\n\n    const pictureStyles = {\n        backgroundImage: 'url(./assets/images/' +  props.picture + ')'\n    };\n\n    const votesFor = ( props.votes.bad > 0 ? Math.round((props.votes.good / (props.votes.bad + props.votes.good)) * 100) : 100);\n    const votingControl = (props.votingClosed ? \n        <VotingClosed \n            unblockVoting={props.unblockVoting}\n            category={props.category}\n        />\n        :\n        <VotingOpen\n            description={props.description}\n            goodVoteHandler={() => props.addVoteHandler(props.id, \"good\")}\n            badVoteHandler={() => props.addVoteHandler(props.id, \"bad\")}\n            submitVoteHandler={props.submitVoteHandler}\n            category={props.category}\n            currentVote={props.currentVote}\n        />\n        );\n\n    return (\n        \n        <Aux>\n            <div className=\"person\" style={pictureStyles}>\n                    <div className=\"info\">\n                        <h3 className={(votesFor >= 50 ? \"hype\" : \"\")}>{props.name}</h3>\n                        \n                        {votingControl}\n                        \n                        <nav className=\"votes-bar\">\n                            <CustomProperties properties={{ '--percentage': votesFor+'%' }}>\n                            <p>\n                                <span className=\"thumbs-up\"></span>\n                                <span>{votesFor}%</span>\n                            </p>\n                            </CustomProperties>\n                            <CustomProperties properties={{ '--percentage': (100 - votesFor)+'%' }}>\n                            <p>\n                                <span>{100 - votesFor}%</span>\n                                <span className=\"thumbs-down\"></span>\n                            </p>\n                            </CustomProperties>\n                        </nav>\n                    </div>\n                </div>\n        </Aux>\n    );\n};\n\nexport default PastPerson;","import React, { Component } from 'react';\nimport Aux from '../../../hoc/Aux';\nimport PastPerson from '../PastPerson/PastPerson';\n\nclass People extends Component {\n\n    state = {\n        people: []\n    };\n\n    componentDidMount() { // Retrieve initial state to populate people array\n        const localPeopleState = window.localStorage.getItem(\"people\");\n        if (localPeopleState !== null) { // The people state was found in localStorage - use that to populate\n            this.setState({\n                people: JSON.parse(localPeopleState)\n            });\n        } else { // No local state found, get static data from JSON file instead\n            fetch('assets/json/data.json')\n            .then( response => {\n                if (response.status !== 200)  {\n                    console.log(\"Uh oh, couldn't retrieve initial data!\");\n                    return;\n                }\n                response.json().then( data => {\n                    console.log(\"Retrived initial data:\");\n                    this.setState({\n                        people: data.People\n                    });\n                    this.persistLocalStorage();\n\n            });\n        });\n        }\n        \n    }\n\n    addVoteHandler = (personId,voteType) => { // Adds a vote to a Person, good or bad indicated by \"voteType\"\n        console.log(\"addVoteHandler(\"+personId+\",\"+voteType+\")\");\n        const oldPeopleState = this.state.people;\n        const newPeopleState = oldPeopleState.map( (person) => {\n            if (person.id === personId) {\n                console.log(\"current vote for \"+person.name+\": \"+voteType);\n                person.currentVote = voteType;\n            }\n            return person;\n        });\n        this.setState({\n            people: newPeopleState\n        });\n        \n    };\n\n    submitVoteHandler = (personId) => { // Submits vote: a selected \"thumbs x\" doesn't store your vote without this\n        \n        const oldPeopleState = this.state.people;\n        const newPeopleState = oldPeopleState.map( (person) => {\n            if (person.id === personId) {\n                person.votes[person.currentVote] = person.votes[person.currentVote] + 1;\n                person.votingClosed = true;\n                person.currentVote = null;\n            }\n            return person;\n        });\n        this.persistLocalStorage(newPeopleState);\n        this.setState({\n            people: newPeopleState\n        });\n        \n    }\n\n    unblockVotingHandler = (personId) => { // Permits voting again after you submitted one vote\n        const oldPeopleState = this.state.people;\n        const newPeopleState = oldPeopleState.map( (person) => {\n            if (person.id === personId) {\n                person.votingClosed = false;\n            }\n            return person;\n        });\n        this.persistLocalStorage();\n        this.setState({\n            people: newPeopleState\n        });\n    };\n\n    persistLocalStorage = (persistable = this.state.people) => { // Persists the whole person collection to browser storage\n        window.localStorage.setItem(\"people\", JSON.stringify(persistable));\n    };\n\n    render () {\n\n        const people = this.state.people.map( person => {\n            return <PastPerson \n                key={\"person-\"+person.id}\n                id={person.id}\n                picture={person.picture}\n                name={person.name}\n                description={person.description}\n                votes={person.votes}\n                category={person.category}    \n                addVoteHandler={this.addVoteHandler}\n                submitVoteHandler={() => this.submitVoteHandler(person.id)}\n                currentVote={person.currentVote ? person.currentVote : null}\n                votingClosed={person.votingClosed}\n                unblockVoting={() => this.unblockVotingHandler(person.id)}\n            />\n        });\n\n        return (\n            <Aux>\n                <section className=\"previous-rulings\">\n                    <h2>Previous Rulings</h2>\n                    <div className=\"people\">\n                    {people}\n                    </div>\n                </section>\n            </Aux>\n        );\n    }\n};\n\nexport default People;","import React from 'react';\nimport Aux from '../../../hoc/Aux';\n\nconst header = (props) => {\n\n    return (\n        <Aux>\n            <header>\n            <section>\n            <h1><a href=\".\">Rule of Thumb.</a></h1>\n            <nav>\n                <ul>\n                    <li>\n                        <a href=\"past-trials.html\">Past Trials</a>\n                        <div>\n                        <ul>\n                            <li><a href=\"past-trials-politics.html\">Politics</a></li>\n                            <li><a href=\"past-trials-business.html\">Business</a></li>\n                            <li><a href=\"past-trials-sports.html\">Sports</a></li>\n                            <li><a href=\"past-trials-culture.html\">Culture</a></li>\n                        </ul>\n                        </div>\n                    </li>\n                    <li>\n                        <a href=\"how-it-works.html\">How It Works</a>\n                    </li>\n                    <li>\n                        <a href=\"login-signup.html\">Log In / Sign Up</a>        \n                    </li>\n                    <li className=\"search\">\n                        <a href=\".\" className=\"search-icon\">\n                            <span>Search</span>\n                        </a>\n                    </li>\n                </ul>\n\n            </nav>\n        </section>\n        </header>\n        </Aux>\n    );\n};\n\nexport default header;","import React from 'react';\nimport Aux from '../../../hoc/Aux';\n\nconst Footer = (props) => {\n\n    return (\n        <Aux>\n            <footer>\n        <section>\n            <nav>\n                <a href=\"terms-conditions.html\">Terms and Conditions</a>\n                <a href=\"privacy-policy.html\">Privacy Policy</a>\n                <a href=\"contact-us.html\">Contact Us</a>\n            </nav>\n            <nav className=\"social-networks\">\n                <a href=\"https://www.facebook.com\" className=\"facebook-link\"><span>Facebook</span></a>\n                <a href=\"https://www.twitter.com\" className=\"twitter-link\"><span>Twitter</span></a>\n            </nav>\n\n        </section>\n\n    </footer>\n        </Aux>\n    );\n};\n\nexport default Footer;","import React from 'react';\nimport Aux from '../../../hoc/Aux';\n\nconst TopPerson = (props) => {\n\n    return (\n        <Aux>\n            {/* <div className=\"person full-view\"> */}\n                \n                <div className=\"info\">\n                    <div className=\"info-top\">\n                        <h3><span>What's your opionion on</span>Pope Francis?</h3>\n                        <p className=\"description\">He's talking tough on clergy sexual abuse, but is he just another papal\n                            pervert protector? (thumbs down) or a true pedophile punishing pontiff? (thumbs up)</p>\n                        <a href=\"https://en.wikipedia.org/wiki/Pope_Francis\" className=\"link-wiki\">More information</a>\n                        <h4>What's Your Verdict?</h4>\n                    </div>\n                    <nav className=\"vote\">\n                        <button className=\"thumbs-up\"></button>\n                        <button className=\"thumbs-down\"></button>\n                    </nav>\n                    \n                </div>\n                <div className=\"time-left\">\n                        <p style={{width: '26%'}}>Closing in</p>\n                        <span className=\"days\"><strong>22</strong> days</span>\n                </div>\n            {/* </div> */}\n        </Aux>\n    );\n};\n\nexport default TopPerson;","import React, { Component } from 'react';\nimport Aux from '../../hoc/Aux';\nimport Header from '../Navigation/Header/Header';\nimport Footer from '../Navigation/Footer/Footer';\nimport TopPerson from '../People/TopPerson/TopPerson';\n\nclass Layout extends Component {\n\n    state = {\n    }\n\n    // sideDrawerClosedHandler = () => {\n    //     this.setState({showSideDrawer: false})\n    // }\n\n    // sideDrawerToggleHandler = () => {\n\n    //     this.setState( (prevState) => {\n    //         return {showSideDrawer: !prevState.showSideDrawer};\n    //     } );\n\n    // }\n\n    render () {\n        const pictureStyles = {\n        backgroundImage: 'url('+process.env.PUBLIC_URL+'/assets/images/francis2.jpg)'\n    };\n        return (\n            <Aux>\n                <Header />\n                <main>\n                    <section className=\"main-ruling\" style={pictureStyles}>\n                    <TopPerson />\n                    </section>\n                </main>\n                <section className=\"secondary\">\n                    <div className=\"alert\">\n                        <h3><span>Speak out. Be heard.</span>Be Counted</h3>\n                        <p>\n                            Rule of Thumb is a crowd sourced court of public opinion where anyone and everyone can speak out and speak freely.\n                            It's easy. You share your opinion, we analyze and put the data in a public report.\n                        </p>\n                        <button>\n                                <svg>\n                                    <path strokeWidth=\"1\" fill=\"none\" d=\"M6.25,6.25,17.75,17.75\" />\n                                    <path strokeWidth=\"1\" fill=\"none\" d=\"M6.25,17.75,17.75,6.25\" />\n                                </svg>\n                        </button>\n                    </div>\n                    {this.props.children}\n                    <div className=\"add-name\">\n                        <p>Is there anyone else you would want us to add?</p>\n                        <button>Submit a Name</button>\n                    </div>\n                </section>\n                <Footer />\n            </Aux>\n        );\n    }\n\n    \n};\n\nexport default Layout;","import React, { Component } from 'react';\nimport People from './components/People/People/People';\nimport Layout from './components/Layout/Layout';\n\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n        <Layout>\n          <People />\n        </Layout>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}